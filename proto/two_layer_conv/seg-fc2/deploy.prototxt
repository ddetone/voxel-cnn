name: "segmentation-deploy"
# layer {
#   name: "data"
#   type: "HDF5Data"
#   top: "data"
#   top: "label"
#   include {
#     phase: TRAIN
#   }
#   hdf5_data_param {
#     source: "../proto/two_layer_conv/seg-fc2/train.txt"
#     batch_size: 2
#   }
# }
# layer {
#   name: "data"
#   type: "HDF5Data"
#   top: "data"
#   top: "label"
#   include {
#     phase: TEST
#   }
#   hdf5_data_param {
#     source: "../proto/two_layer_conv/seg-fc2/test.txt"
#     batch_size: 2
#   }
# }
input: "data"
input_shape {
  dim: 1
  dim: 1
  dim: 80
  dim: 80
  dim: 80
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 7
    stride: 1
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    stride: 1
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "fc3-conv"
  type: "Convolution"
  bottom: "pool2"
  top: "fc3-conv"
  convolution_param {
    num_output: 64
    kernel_size: 5
    pad: 0
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
# 1x1 conv to predict classes
layer {
  name: "fc4-conv"
  type: "Convolution"
  bottom: "fc3-conv"
  top: "fc4-conv"
  convolution_param {
    num_output: 10
    kernel_size: 1
    pad: 2
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
# 2x upsample
layer {
  name: "upsample-fc4-conv"
  type: "Deconvolution"
  bottom: "fc4-conv"
  top: "upsample-fc4-conv"
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 10
    bias_term: false
    kernel_size: 4
    stride: 2
    pad: 1
  }
}
# 1x1 conv to predict classes
layer {
  name: "score-pool1"
  type: "Convolution"
  bottom: "pool1"
  top: "score-pool1"
  convolution_param {
    num_output: 10
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "fuse"
  type: "Eltwise"
  bottom: "upsample-fc4-conv"
  bottom: "score-pool1"
  top: "fuse"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "upsample-fuse"
  type: "Deconvolution"
  bottom: "fuse"
  top: "upsample-fuse"
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 10
    bias_term: false
    kernel_size: 4
    stride: 2
  }
}
